{"entries":[{"timestamp":1737882577902,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"d-#j7tLnl?8`cPV,IlNN\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"-Gfl%9~n(`AN1Es:;zuX\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n"],[-1,"//% color=\"#7fd12c\" icon=\"\\uf2a1\"\nnamespace decbase {\n\n    let anmt = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n    //% blockid=decbase_dec2base\n    //% block=\"convert $nvl in base $bvl|| to digit $dvl\"\n    //% group=\"main operation\"\n    //% weight=10\n    export function decEncode(nvl: number, bvl: number, dvl: number=null): string {\n        let sti = \"\", ani = nvl\n        if (ani > 0) {\n            while (ani > 0) {\n                sti = \"\" + anmt.charAt(ani % bvl) + sti\n                ani = Math.floor(ani / bvl)\n            }\n        } else {\n            sti = anmt.charAt(0)\n        }\n        if (dvl === null) return sti\n        if (dvl <= 0) return sti\n        if (sti.length > dvl) return sti\n        if (dvl - sti.length > 0) {\n            while (dvl - sti.length > 0) {\n                sti = \"\" + anmt.charAt(0) + sti\n            }\n        }\n        return sti\n    }\n\n    //% blockid=decbase_base2dec\n    //% block=\"convert $tvl to dec in $bvl\"\n    //% group=\"main operation\"\n    //% weight=8\n    export function decDecode(tvl: string, bvl: number): number {\n        let stl = tvl.length, vld = 0, nvl = 0, vix = 0\n        for (let nix = stl - 1; nix >= 0; nix--) {\n            vix = anmt.indexOf(tvl.charAt(nix))\n            if (vld == 0) {\n                nvl += vix\n                vld = bvl\n            } else {\n                nvl += vix * vld\n                vld = vld * bvl\n            }\n        }\n        return nvl\n    }\n\n    //% blockid=decbase_decsum\n    //% block=\"sum decimal in $nvl and $bvl\"\n    //% group=\"sum operation\"\n    //% weight=6\n    export function sumDecimal(nvl: number, bvl: number): number {\n        let dvl = 0\n        while (nvl >= dvl) {\n            if (dvl == 0) {\n                dvl = bvl\n            } else {\n                dvl = dvl * bvl\n            }\n        }\n        return dvl\n    }\n\n    //% blockid=decbase_declensum\n    //% block=\"Sum Digit At $nvl In $bvl\"\n    //% group=\"sum operation\"\n    //% weight=4\n    export function sumDecDigit(nvl: number, bvl: number): number {\n        let dvl = 0, dvi = 0\n        while (nvl >= dvl) {\n            if (dvl == 0) {\n                dvi += 1\n                dvl = bvl\n            } else {\n                dvi += 1\n                dvl = dvl * bvl\n            }\n        }\n        return dvl\n    }\n\n    //% blockid=decbase_binxor\n    //% block=\"Bin Xor in $sva and $svb\"\n    //% group=\"xor operation\"\n    //% weight=10\n    export function BinXor(sva: string, svb: string): string {\n        let tvl = \"\"\n        if (sva.length != svb.length) {\n            return tvl\n        }\n        for (let six: number = 0; six < sva.length; six++) {\n            if (sva.charAt(six) != svb.charAt(six)) {\n                tvl = \"\" + tvl + \"1\"\n            } else {\n                tvl = \"\" + tvl + \"0\"\n            }\n        }\n        return tvl\n    }\n\n    //% blockid=decbase_dec2bin\n    //% block=\"dec convert $nvl to bin|| in $dvl\"\n    //% group=\"binary operation\"\n    //% weight=10\n    export function dec2bin(nvl: number, dvl: number=null): string {\n        return decEncode(nvl, 2, dvl)\n    }\n\n    //% blockid=decbase_bin2dec\n    //% block=\"bin convert $tvl to dec\"\n    //% group=\"decimal operation\"\n    //% weight=10\n    export function bin2dec(tvl: string): number {\n        return decDecode(tvl, 2)\n    }\n\n    //% blockid=decbase_dec2hex\n    //% block=\"dec convert $nvl to hex|| in $dvl\"\n    //% group=\"hexadecimal operation\"\n    //% weight=10\n    export function dec2hex(nvl: number, dvl: number=null): string {\n        return decEncode(nvl, 16, dvl)\n    }\n\n    //% blockid=decbase_hex2dec\n    //% block=\"hex convert $tvl to dec\"\n    //% group=\"decimal operation\"\n    //% weight=8\n    export function hex2dec(tvl: string): number {\n        return decDecode(tvl, 16)\n    }\n\n    //% blockid=decbase_dec2oct\n    //% block=\"dec convert $nvl to oct|| in $dvl\"\n    //% group=\"octal operation\"\n    //% weight=10\n    export function dec2oct(nvl: number, dvl: number=null): string {\n        return decEncode(nvl, 8, dvl)\n    }\n\n    //% blockid=decbase_oct2dec\n    //% block=\"oct convert $tvl to dec\"\n    //% group=\"decimal operation\"\n    //% weight=6\n    export function oct2dec(tvl: string): number {\n        return decDecode(tvl, 2)\n    }\n\n    //% blockid=decbase_oct2dec\n    //% block=\"hex convert $tvl to bin|| in $dvl\"\n    //% group=\"binary operation\"\n    //% weight=8\n    export function hex2bin(tvl: string, dvl: number=null): string {\n        return decEncode(decDecode(tvl, 16), 2)\n    }\n\n    //% blockid=decbase_oct2dec\n    //% block=\"oct convert $tvl to bin|| in $dvl\"\n    //% group=\"binary operation\"\n    //% weight=6\n    export function oct2bin(tvl: string, dvl: number=null): string {\n        return decEncode(decDecode(tvl, 8), 2, dvl)\n    }\n\n    //% blockid=decbase_oct2dec\n    //% block=\"bin convert $tvl to hex|| in $dvl\"\n    //% group=\"hexadecimal operation\"\n    //% weight=8\n    export function bin2hex(tvl: string, dvl: number=null): string {\n        return decEncode(decDecode(tvl, 2), 16)\n    }\n\n    //% blockid=decbase_oct2dec\n    //% block=\"oct convert $tvl to hex|| in $dvl\"\n    //% group=\"hexadecimal operation\"\n    //% weight=6\n    export function oct2hex(tvl: string, dvl: number=null): string {\n        return decEncode(decDecode(tvl, 8), 16, dvl)\n    }\n\n    //% blockid=decbase_oct2dec\n    //% block=\"bin convert $tvl to oct|| in $dvl\"\n    //% group=\"octal operation\"\n    //% weight=8\n    export function bin2oct(tvl: string, dvl: number=null): string {\n        return decEncode(decDecode(tvl, 2), 8)\n    }\n\n    //% blockid=decbase_oct2dec\n    //% block=\"hex convert $tvl to oct|| in $dvl\"\n    //% group=\"octal operation\"\n    //% weight=6\n    export function hex2oct(tvl: string, dvl: number=null): string {\n        return decEncode(decDecode(tvl, 16), 8, dvl)\n    }\n\n    //% blockid=decbase_numxor\n    //% block=\"Xor $nma ^ $nmb\"\n    //% group=\"xor operation\"\n    //% weight=5\n    export function NumXor(nma: number, nmb: number): number {\n        return nma ^ nmb\n    }\n\n    //% blockid=decbase_charidx\n    //% block=\"Char code in $txt at $cidx\"\n    //% group=\"Charcter index\"\n    //% weight=10\n    export function CharIdxAt(txt: string, cidx: number): number {\n        return txt.charCodeAt(cidx)\n    }\n}\n"]],"start1":0,"start2":0,"length1":6221,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":241,"start2":241,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1737882577901,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"microbit-dec-base\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1737883041527}